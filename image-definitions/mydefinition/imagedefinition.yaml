# This is a MS DevBox image definition configuration created for testing purposes.
# Tools and apps : VSCode, Azure Storage Explorer, SQL Server Management Studio, OpenVPN, Docker Desktop and Postman.

$schema: "1.0"
# The name is used to identify the image definition and it is visible in the DevBox catalog.
name: "mytest-dev"
# The image is the technical base image name used for the DevBox. On top of this image, additional tools will be installed.
image: microsoftvisualstudio_visualstudioplustools_vs-2022-ent-general-win11-m365-gen2
# The description provides a brief description of the image definition.
description: "This definition is for testing the project team configuration in MS DevBox"
# The tasks section contains a list of tasks to be executed in background during the DevBox provisioning.
tasks:
# The following tasks are used for installing applications via WinGet built-in tasks.
  - name: winget
    description: Install VSCode
    parameters:
      package:  Microsoft.VisualStudioCode
  
  - name: winget
    description: Install Azure Storage Explorer
    parameters:
      package:  Microsoft.Azure.StorageExplorer
  
  - name: winget
    description: Install SQL Server Management Studio
    parameters:
      package:  Microsoft.SQLServerManagementStudio
  
  - name: winget
    description: Install OpenVPN
    parameters:
      package:  OpenVPNTechnologies.OpenVPN
  
  # The following tasks are used for installing applications via PowerShell built-in tasks.
  - name: powershell
    parameters:
      command: |
        # Ensure C:\Temp exists for downloads
        $tempPath = "C:\Temp"
        if (-not (Test-Path $tempPath)) {
          New-Item -Path $tempPath -ItemType Directory | Out-Null
        }

        # Define the installer path
        $dockerInstaller = Join-Path $tempPath "DockerDesktopInstaller.exe"

        # Download the latest Docker Desktop installer
        try {
          Invoke-WebRequest -Uri "https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe" -OutFile $dockerInstaller -UseBasicParsing
        } catch {
          Write-Error "Failed to download Docker Desktop installer: $($_.Exception.Message)"
          exit 1
        }

        # Verify the installer exists
        if (-not (Test-Path $dockerInstaller)) {
          Write-Error "Docker Desktop installer was not downloaded."
          exit 1
        }

        # Install Docker Desktop silently
        try {
          Start-Process -FilePath $dockerInstaller -ArgumentList "install", "--quiet", "--accept-license" -Wait
        } catch {
          Write-Error "Failed to install Docker Desktop: $($_.Exception.Message)"
          exit 1
        }

        # Remove the installer
        try {
          Remove-Item $dockerInstaller -Force
        } catch {
          Write-Warning "Could not remove installer file: $($_.Exception.Message)"
        }

        Write-Host "Docker Desktop installation completed successfully."

  - name: powershell
    parameters:
      command: |
        $env:Path = [System.Environment]::GetEnvironmentVariable('Path','Machine') + ';' + [System.Environment]::GetEnvironmentVariable('Path','User')
# The userTasks section contains a list of tasks to be automatically executed in user context after the user first sign-in to the DevBox.
userTasks:

  - name: winget
    description: Install Postman
    parameters:
      package:  Postman.Postman
  
  # Many other tasks can be added here as needed, such as installing additional tools or configuring settings. WinGet dsc configuration files are also supported.